---
- name: Setup WiFi Hotspot on Raspberry Pi
  hosts: raspberry_pi
  become: yes
  vars_files:
    - secrets.yml
  vars:
    hotspot_interface: "wlan0"
    # Use secrets from encrypted file
    hotspot_ssid: "{{ wifi_hotspot.ssid }}"
    hotspot_password: "{{ wifi_hotspot.password }}"
    hotspot_ip: "{{ network.hotspot_ip }}"
    hotspot_dhcp_range_start: "{{ network.dhcp_range_start }}"
    hotspot_dhcp_range_end: "{{ network.dhcp_range_end }}"
    hotspot_channel: "{{ network.channel }}"
    # External hotspot (phone) for internet access during setup
    external_hotspot_name: "{{ external_hotspot.name }}"
    external_hotspot_password: "{{ external_hotspot.password }}"
    # Wired network (eth0) configuration for Pi
    pi_eth_interface: "eth0"
    pi_eth_ip: "192.168.14.11"
    pi_eth_prefix: "24"
    # Optional gateway on wired network (set to e.g. 192.168.14.1 if present). If undefined, no default route will be set via eth0.
    pi_eth_gateway: ""
    # Robot controller hostname mapping
    krcpc_ip: "192.168.14.70"

  tasks:
    - name: Stop Pi's hotspot services if running
      systemd:
        name: "{{ item }}"
        state: stopped
      loop:
        - hostapd
        - dnsmasq
      ignore_errors: yes

    - name: Ensure wlan0 is in managed mode (not AP mode)
      shell: |
        # Bring interface down, remove IP, bring back up for client mode
        ip link set {{ hotspot_interface }} down
        ip addr flush dev {{ hotspot_interface }}
        ip link set {{ hotspot_interface }} up
      ignore_errors: yes

    - name: Ensure NetworkManager can manage wlan0 (remove unmanaged setting)
      lineinfile:
        path: /etc/NetworkManager/NetworkManager.conf
        regexp: '^unmanaged-devices=interface-name:{{ hotspot_interface }}'
        state: absent
      register: nm_config_changed

    - name: Restart NetworkManager to pick up wlan0
      systemd:
        name: NetworkManager
        state: restarted

    - name: Wait for NetworkManager to settle and wlan0 to be ready
      pause:
        seconds: 5

    - name: Explicitly set wlan0 to managed mode
      shell: nmcli device set {{ hotspot_interface }} managed yes
      ignore_errors: yes

    - name: Wait for wlan0 to become available
      pause:
        seconds: 2

    - name: Ensure wlan0 is ready for scanning
      shell: |
        # Wait for device to be available
        for i in {1..10}; do
          if nmcli device status | grep -q "wlan0.*disconnected"; then
            break
          fi
          sleep 1
        done
      changed_when: false
      when: nm_config_changed.changed

    - name: Scan for WiFi networks
      shell: nmcli device wifi rescan ifname {{ hotspot_interface }}
      changed_when: false
      retries: 5
      delay: 3
      register: wifi_scan
      until: wifi_scan.rc == 0
      ignore_errors: yes

    - name: Wait for scan to complete
      pause:
        seconds: 2

    - name: Connect to external hotspot for internet access
      shell: |
        # Remove any existing connection with this name
        nmcli connection delete "{{ external_hotspot_name }}" 2>/dev/null || true
        # Create new WiFi client connection and wait for it
        nmcli device wifi connect "{{ external_hotspot_name }}" password "{{ external_hotspot_password }}" ifname {{ hotspot_interface }}
      register: wifi_connect
      retries: 3
      delay: 5
      until: wifi_connect.rc == 0

    - name: Wait for DHCP and network configuration
      pause:
        seconds: 5

    - name: Verify internet connectivity
      shell: ping -c 2 8.8.8.8
      register: internet_check
      retries: 3
      delay: 3
      until: internet_check.rc == 0

    - name: Wait for internet connectivity
      wait_for:
        host: 8.8.8.8
        port: 53
        timeout: 30
      
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600
    - name: Gather service facts
      service_facts:

    - name: Ensure krcpc is present in /etc/hosts on the Pi
      lineinfile:
        path: /etc/hosts
        create: yes
        owner: root
        group: root
        mode: '0644'
        regexp: '^\s*{{ krcpc_ip | regex_escape() }}\s+krcpc(\s|$)'
        line: "{{ krcpc_ip }} krcpc"

    - name: Configure eth0 static IP via NetworkManager (if available)
      block:
        - name: Ensure eth0-static connection exists
          shell: |
            nmcli -t -f NAME c show | grep -qx "eth0-static" || \
            nmcli connection add type ethernet ifname {{ pi_eth_interface }} con-name eth0-static

        - name: Apply IPv4 settings to eth0-static
          shell: |
            nmcli connection modify eth0-static \
              ipv4.addresses {{ pi_eth_ip }}/{{ pi_eth_prefix }} \
              ipv4.method manual \
              ipv4.dns "8.8.8.8 1.1.1.1" \
              connection.autoconnect yes \
              ipv4.route-metric 100

        - name: Configure eth0 gateway and default route preference (if provided)
          shell: |
            if [ -n "{{ pi_eth_gateway }}" ]; then
              nmcli connection modify eth0-static ipv4.gateway {{ pi_eth_gateway }} ipv4.never-default no
            else
              nmcli connection modify eth0-static ipv4.gateway "" ipv4.never-default yes
            fi

        - name: Bring up eth0-static connection
          shell: nmcli connection up eth0-static || nmcli connection reload && nmcli connection up eth0-static
      when: "'NetworkManager.service' in ansible_facts.services"

    - name: Configure eth0 static IP without NetworkManager (fallback)
      block:
        - name: Ensure eth0 is up
          shell: ip link set {{ pi_eth_interface }} up
        - name: Assign static IP to eth0
          shell: |
            ip addr flush dev {{ pi_eth_interface }}
            ip addr add {{ pi_eth_ip }}/{{ pi_eth_prefix }} dev {{ pi_eth_interface }}
        - name: Set default route via eth0 when gateway provided
          shell: |
            if [ -n "{{ pi_eth_gateway }}" ]; then
              ip route replace default via {{ pi_eth_gateway }} dev {{ pi_eth_interface }} metric 100 || true
            fi
      when: "'NetworkManager.service' not in ansible_facts.services"

    - name: Install required packages for hotspot
      apt:
        name:
          - hostapd
          - dnsmasq
          - iptables-persistent
        state: present

    # ===== Phase 3: Install Docker and setup project =====
    - name: Install Docker prerequisites
      apt:
        name:
          - ca-certificates
          - curl
          - gnupg
        state: present

    - name: Add Docker GPG key
      shell: |
        install -m 0755 -d /etc/apt/keyrings
        curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc
        chmod a+r /etc/apt/keyrings/docker.asc
      args:
        creates: /etc/apt/keyrings/docker.asc

    - name: Add Docker repository
      shell: |
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
      args:
        creates: /etc/apt/sources.list.d/docker.list

    - name: Update apt cache after adding Docker repo
      apt:
        update_cache: yes

    - name: Install Docker and Docker Compose
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present

    - name: Add pi user to docker group
      user:
        name: pi
        groups: docker
        append: yes

    - name: Ensure git is installed
      apt:
        name: git
        state: present

    - name: Check if kuka-control-correction repo exists
      stat:
        path: /home/pi/kuka-control-correction
      register: repo_exists

    - name: Clone kuka-control-correction repository
      become: yes
      become_user: pi
      git:
        repo: 'https://github.com/jopdorp/kuka-control-correction.git'
        dest: /home/pi/kuka-control-correction
        version: main
        force: yes
      when: not repo_exists.stat.exists

    - name: Pull latest changes from main branch
      become: yes
      become_user: pi
      git:
        repo: 'https://github.com/jopdorp/kuka-control-correction.git'
        dest: /home/pi/kuka-control-correction
        version: main
        update: yes
      when: repo_exists.stat.exists

    - name: Start file upload service with Docker Compose
      become: yes
      become_user: pi
      community.docker.docker_compose_v2:
        project_src: /home/pi/kuka-control-correction/raspberry-pi/file-upload-service
        state: present
      environment:
        DOCKER_HOST: unix:///var/run/docker.sock

    - name: Stop services while configuring
      systemd:
        name: "{{ item }}"
        state: stopped
        enabled: no
      loop:
        - hostapd
        - dnsmasq
      ignore_errors: yes  # In case services don't exist yet

    - name: Disable NetworkManager management of wlan0 for hostapd
      lineinfile:
        path: /etc/NetworkManager/NetworkManager.conf
        line: "unmanaged-devices=interface-name:{{ hotspot_interface }}"
        insertafter: '\[keyfile\]'
        create: yes
      notify:
        - restart NetworkManager

    - name: Ensure wlan0 is up first
      shell: |
        ip link set {{ hotspot_interface }} up
        
    - name: Set static IP for hotspot interface (before hostapd/dnsmasq start)
      shell: |
        ip addr flush dev {{ hotspot_interface }}
        ip addr add {{ hotspot_ip }}/24 dev {{ hotspot_interface }}
      notify:
        - restart NetworkManager

    - name: Create hostapd configuration
      template:
        src: hostapd.conf.j2
        dest: /etc/hostapd/hostapd.conf
        owner: root
        group: root
        mode: '0644'
        backup: yes
      notify:
        - restart hostapd

    - name: Configure hostapd daemon path
      lineinfile:
        path: /etc/default/hostapd
        regexp: '^#?DAEMON_CONF='
        line: 'DAEMON_CONF="/etc/hostapd/hostapd.conf"'
        backup: yes

    - name: Backup original dnsmasq config
      copy:
        src: /etc/dnsmasq.conf
        dest: /etc/dnsmasq.conf.orig
        remote_src: yes
        force: no

    - name: Create dnsmasq configuration
      template:
        src: dnsmasq.conf.j2
        dest: /etc/dnsmasq.conf
        owner: root
        group: root
        mode: '0644'
        backup: yes
      notify:
        - restart dnsmasq

    - name: Enable IP forwarding
      sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        sysctl_set: yes
        state: present
        reload: yes

    - name: Configure iptables for NAT (internet sharing)
      iptables:
        table: nat
        chain: POSTROUTING
        out_interface: eth0
        jump: MASQUERADE
      notify:
        - save iptables

    - name: Configure iptables forwarding rules - RELATED,ESTABLISHED
      iptables:
        chain: FORWARD
        in_interface: eth0
        out_interface: "{{ hotspot_interface }}"
        ctstate: RELATED,ESTABLISHED
        jump: ACCEPT
      notify:
        - save iptables

    - name: Configure iptables forwarding rules - wlan to eth
      iptables:
        chain: FORWARD
        in_interface: "{{ hotspot_interface }}"
        out_interface: eth0
        jump: ACCEPT
      notify:
        - save iptables

    - name: Create WiFi mode switcher script
      template:
        src: wifi-mode.sh.j2
        dest: /usr/local/bin/wifi-mode
        owner: root
        group: root
        mode: '0755'

    - name: Create hotspot control script
      template:
        src: hotspot-control.sh.j2
        dest: /usr/local/bin/hotspot-control
        owner: root
        group: root
        mode: '0755'

    - name: Create systemd service for hotspot
      template:
        src: kuka-hotspot.service.j2
        dest: /etc/systemd/system/kuka-hotspot.service
        owner: root
        group: root
        mode: '0644'
      notify:
        - reload systemd

    - name: Unmask hostapd service (in case it's masked)
      systemd:
        name: hostapd
        masked: no
        daemon_reload: yes

    - name: Enable kuka-hotspot service (sets wlan0 IP before hostapd/dnsmasq)
      systemd:
        name: kuka-hotspot
        enabled: yes
        daemon_reload: yes
        
    - name: Enable hostapd and dnsmasq to start on boot (after kuka-hotspot)
      systemd:
        name: "{{ item }}"
        enabled: yes
        daemon_reload: yes
      loop:
        - hostapd
        - dnsmasq

    - name: Create hotspot status check script
      template:
        src: hotspot-status.j2
        dest: /usr/local/bin/hotspot-status
        owner: root
        group: root
        mode: '0755'

    - name: Disconnect from external hotspot
      shell: |
        nmcli connection down "{{ external_hotspot_name }}" 2>/dev/null || true
        nmcli connection delete "{{ external_hotspot_name }}" 2>/dev/null || true
      ignore_errors: yes

    - name: Stop NetworkManager management of wlan0
      shell: |
        nmcli device set {{ hotspot_interface }} managed no
      ignore_errors: yes

    - name: Set wlan0 IP address
      shell: |
        ip addr flush dev {{ hotspot_interface }}
        ip addr add {{ hotspot_ip }}/24 dev {{ hotspot_interface }}
        ip link set {{ hotspot_interface }} up

    - name: Start hostapd
      systemd:
        name: hostapd
        state: started
        enabled: yes

    - name: Wait for hostapd to initialize
      pause:
        seconds: 2

    - name: Start dnsmasq
      systemd:
        name: dnsmasq
        state: started
        enabled: yes

    - name: Wait for hotspot to be ready
      wait_for:
        timeout: 5

    - name: Display setup completion message
      debug:
        msg: |
          ╔════════════════════════════════════════════╗
          ║   KUKA Hotspot Setup Complete! 🎉         ║
          ╚════════════════════════════════════════════╝
          
          📡 Your Pi is now broadcasting:
          • WiFi Network: {{ hotspot_ssid }}
          • Password: {{ hotspot_password }}
          • Pi IP: {{ hotspot_ip }}
          
          🌐 Access services:
          • File Upload: http://{{ hotspot_ip }}:{{ services.file_upload_port }}
          • SSH to Pi: ssh pi@{{ hotspot_ip }}
          
          🐳 Docker services running:
          • File upload service (port {{ services.file_upload_port }})
          
          🔧 Control the hotspot on the Pi:
          • sudo hotspot-control start
          • sudo hotspot-control stop
          • sudo hotspot-control status
          
          📡 Switch to internet mode (connect to your phone):
          • sudo wifi-mode internet
          
          📡 Switch back to hotspot mode:
          • sudo wifi-mode hotspot
          
          📂 Project location: /home/pi/kuka-control-correction

  handlers:
    - name: restart NetworkManager
      systemd:
        name: NetworkManager
        state: restarted

    - name: restart hostapd
      systemd:
        name: hostapd
        state: restarted

    - name: restart dnsmasq
      systemd:
        name: dnsmasq
        state: restarted

    - name: save iptables
      shell: iptables-save > /etc/iptables/rules.v4

    - name: reload systemd
      systemd:
        daemon_reload: yes

  post_tasks:
    - name: Display connection information
      debug:
        msg: |
          ========================================
          WiFi Hotspot Setup Complete!
          ========================================
          
          Connection Details:
          • WiFi Network: {{ hotspot_ssid }}
          • Password: {{ hotspot_password }}
          • Pi IP Address: {{ hotspot_ip }}
          
          Access Services:
          • File Upload: http://{{ hotspot_ip }}:{{ services.file_upload_port }}
          • SSH to Pi: ssh pi@{{ hotspot_ip }}
          
          🐳 Docker Services:
          • File upload service running on port {{ services.file_upload_port }}
          • Project: /home/pi/kuka-control-correction
          
          Management Commands:
          • Switch to internet: sudo wifi-mode internet
          • Switch to hotspot: sudo wifi-mode hotspot
          • Hotspot control: sudo hotspot-control [start|stop|status]
          
          Next Steps:
          1. Test connection from your laptop
          2. Access file upload at http://{{ hotspot_ip }}:{{ services.file_upload_port }}
          ========================================
